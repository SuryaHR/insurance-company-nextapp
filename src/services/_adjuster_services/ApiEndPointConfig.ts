/* eslint-disable no-unused-vars */
enum adjusterApi {
  buildInfo = "application/buildinfo",
  companyLogo = "web/company-logo",
  companyLogoBackgroundImage = "web/company-backgroundImage",
  login = "web/login",
  securityQuestion = "web/get/security/questions",
  changePassword = "web/update/password",
  saveSecurityQuestion = "web/save/security/answer",
  forgotPassword = "customer/forgetpassword",
  randomQuestion = "web/get/selected/question/",
  verifySecurityQuestion = "web/verify/security/answer/",
  claimList = "web/open/claims",
  notification = "web/notifications",
  scoreCard = "web/claims/scorecard?statusFlag=",
  deleteNotification = "web/delete/notification",
  immidiateAttentionClaims = "web/get/immediate/attention/claims?userId=",
  invoicelist = "web/get/company/invoicelist",
  urgentClaimUrl = "web/get/all/immediate/claims",
  pendingInvoiceUrl = "web/get/company/pending/invoicelist",
  claimContentList = "web/adjuster/claim/line/items",
  serviceRequest = "web/servicerequests",
  postEmail = "web/policyholder/info",
  getPolicyType = "web/policytypes?stateId=",
  detailsClaim = "web/claim/details",
  stateOption = "web/states",
  lossTypeOption = "web/claim/loss/types",
  homeOwnersType = "web/claim/get/category/coverage",
  excelcsvuploaddata = "web/read/postloss/items",
  itemsDetails = "web/claim/itemdetails",
  categoriesRequest = "web/categories",
  replacementApi = "web/claim/search/replacement",
  savePolicy = "web/adjuster/create/policy",
  policyInfo = "web/policy/info",
  saveClaim = "web/adjuster/create/claim",
  deleteClaimContentListItem = "web/remove/postlossitem",
  lineItemCategory = "web/claim/get/category",
  lineItemSubCategory = "web/item/subcategories",
  lineItemCondition = "web/claim/get/condition",
  lineItemRoom = `customer/claim/{{CLAIM}}/rooms`,
  lineItemRetailer = "web/all/retailers",
  pendingTaskList = "web/claim/pendingtasklist",
  claimDetailMessageList = "web/messages",
  deleteServiceRequestItem = "web/delete/servicerequest",
  addItemsListTable = "web/claim/creation/line/items",
  importCsvTable = "web/import/postloss/items",
  roomTypeApi = "web/room/types",
  addContentItemApi = "web/add/itemtopostloss",
  claimParticipantsUrl = "web/claim/participants",
  claimContentsUrl = "web/adjuster/claim/contents",
  companyDetailsUrl = "web/company/details",
  addNewRoomApi = "customer/add/room",
  updateContentItemApi = "web/claim/update/postlossitem",
  activityLogHistoryApi = "web/claim/assignment/history",
  downloadActivityLogApi = "web/export/claim_log/pdf",
  uploadActivityLogDataApi = "web/claim/add/custom/activitylog",
  pushNoteApiUrl = "web/push/note",
  claimSettlementApiUrl = "web/calculate/claim/settlement?claim=",
  detailedInventoryReport = "web/report/claim/items/statistics/?claimNum=",
  detailedInventoryReportSend = "web/report/send/mail/contentSummary",
  policyholderPayouts = "web/report/claim/itemcost/statistics",
  policyholderPaymentInfo = "web/get/paymentInfo",
  paymentSummaryTable = "web/report/claim/item/payment/statistics",
  coverageSummaryReport = "web/report/claim/category/statistics",
  detailedInventoryReportPDF = "web/claim/settlement/PDF",
  coverageSummaryReportPDF = "web/export/claim/category/statistics",
  detailedInventoryReportExcel = "web/export/detailed/inventory",
  paymentPayoutInfoPDF = "web/download/paymentInfo/pdf",
  newCustomComparable = "web/add/custom/item",
  deleteCustomItemApi = "web/delete/custom/item?id={{COMPARABLE_ID}}",
  mapperClaimedItems = "web/claim/line/items",
  updateCliamCategory = "web/bulk/update/item/category",
  updateCliamStatus = "web/bulk/update/item/status",
  updatePaidStatus = "web/claim/items/paid",
  updateUnderReview = "web/review/claim/supervisor",
  reviewItemSupervisor = "web/review/item/supervisor",
  taskListApiUrl = "web/claim/tasklist/home",
  createTaskApiUrl = "web/claim/create/task",
  assignVendorGet = "web/registered/vendors",
  vendorAssignmentsApiUrl = "web/claim/assignment/vendorassignments",
  vendorAssignmentItems = "web/vendor/assignment/items",
  vendorAssignmentDetails = "web/vendor/assignment/details",
  vendorAssignmentStatus = "web/assignment/status",
  vendorAssignmentGraph = "web/assignment/response/time/graph",
  contentServices = "web/contentservices",
  selectVendorServicesApi = "web/assignment/vendor/details",
  submitVendorApi = "web/assignment/vendor",
  deleteLineItemReceiptAttachment = "web/delete/attachment/{{IMAGE_ID}}/purpose/{{PURPOSE}}",
  updateClaimDetailApiUrl = "web/claim/update/claimdetails",
  receiptApi = "web/upload/receipt",
  getQuoteByAssApiUrl = "web/assignment/quotes",
  getInvoiceAssApiUrl = "web/company/invoicelist",
  receiptMapperDateApi = "web/pdf/list/date",
  saveLineItem = "web/save/item/comparables",
  quoteViewDataApi = "web/vendor/quote/details",
  invoiceViewDataApi = "web/invoice/details",
  exportQuotePdfApi = "web/vendor/quote/PDF",
  exportInvoicePdfApi = "web/export/invoice/pdf",
  approveQuoteApi = "web/update/vendor/quote",
  mappedlineitems = "web/mapper/get/mappedlineitems",
  attachitemreplacementcost = "web/mapper/post/attachitemreplacementcost/",
  edititemreplacementcost = "web/mapper/edit/mappedlineitem",
  updateItemStatusSettled = "web/mapper/post/updateItemStatusSettled/",
  deleteitemreplacementcost = "web/mapper/delete/mappedlineitem",
  getCustomerState = "customer/get/state/list",
  invoicePaymentApi = "web/invoice/payment",
  invoiceVoidApi = "web/invoice/approval",
  invoiceSupReviewApi = "web/review/invoice",
  vendorAssignmentRating = "web/assignment/update/rating",
  policyAndCoverageDetailsUpdate = "web/update/policyholder",
  paymentContactDetailsApi = "web/get/invoice/payment/contract/details",
  getItemComments = "web/rooms/item/comments",
  addItemComment = "web/rooms/add/item/comment",
  adjusterByCompanyId = "web/company/adjusters",
  reassignAdjuster = "web/adjuster/claim/reassign",
  documentsDetailsApi = "web/claim/attachments",
  // summaryPDFDownloadApi = "web/claim/settlement/PDF",
  documentsUploadApi = "web/add/claim/attachments",
  claimNotesDetailsApi = "web/notes",
  deleteMediafiles = "web/delete/mediafiles",
  tagGetApi = "web/pdf/tags",
  tadAddApi = "web/add/pdf/tag",
  tagDeleteApi = "web/delete/pdf/tags",
  statusList = "web/claim/statuslist",
  adjusterClaimList = "web/adjuster/claims",
  sendEmailPlaceHolder = "web/admin/reset/password",
  userProfileDetail = "web/policyholder/details",
  updateUserProfile = "web/update/user/profile",
  globalSearch = "/web/search",
  updateClaimStatus = "web/claim/updatestatus",
  getAllPolicyType = "web/policytypes",
  claimsforReport = "web/claims",
  salvageStatusforReport = "web/get/salvage/status",
  salvageReportforReport = "web/salvage/reports/1/20",
  exportClaimsforReport = "web/export/salvage/reports",
  canclePolicyholderTask = "web/cancle/Policyholder/task",
  deletePolicyholderTask = "web/claim/task/delete/{{id}}",
  UpdatePolicyDetails = "web/adjuster/update/policy",
  hardDelteClaim = "web/adjuster/claim/hardDelete",
  vendorDetail = "web/vendor/details",
  vendorInvoice = "web/company/invoice",
  vendorInvoiceStatus = "web/list/invoice/status",
  vendorPayments = "web/company/accountpayables",
  vendorPaymentsStatus = "web/list/payable/status",
  participants = "web/participants/item/{{ITEM_ID}}",
  subCategories = "web/claim/get/all/subcategory",
  vendorInvoicesData = "web/item/invoices/underreview",
}

enum insAdminApi {
  officelist = "web/officelist",
  designation = "web/designation",
  roles = "web/roles",
  reportingmanagers = "web/insurance/reportingmanagers",
  addEmployee = "web/add/branch/employee",
  updateEmployee = "web/update/branch/employee",
  getCompanyEmployees = "web/company/employees",
  removeUser = "web/remove/user",
  stateOption = "web/states",
  companyProfileList = "web/get/company/profile",
}

enum claimSupervisorApi {
  supervisorMyTeam = "web/supervisor/adjuster",
}

enum coreLogicApi {
  authenticate = "web/coreLogic/authenticate",
}

const apiEndPoints = {
  ...adjusterApi,
  ...insAdminApi,
  ...claimSupervisorApi,
  ...coreLogicApi,
};

export const getApiEndPoint = (endpoint: keyof typeof apiEndPoints) => {
  const apiURL =
    `${process.env.NEXT_PUBLIC_SERVER_ADDRESS}` +
    `${process.env.NEXT_PUBLIC_API_URL}` +
    apiEndPoints[endpoint];
  return apiURL;
};
